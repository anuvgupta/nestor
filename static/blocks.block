    *

// nestor node custom blocks blockfile

// define custom blocks
!break
    init
        {
            return Block('span').add('br');
        }
    load
        {
            data('val', val => {
                for (var i = 1; i < val; i++)
                    block.add('br');
            });
        }
!text
    init
        {
            return Block('span');
        }
    load
        {
            data('val', val => {
                block.node().appendChild(document.createTextNode(val));
            });
            data('html', html => {
                block.html(html);
            });
        }
!image
    init
        {
            return Block('div');
        }
    load
        {
            var src = data('src');
            var height = data('height');
            var width = data('width');
            var alt = data('alt');
            if (src != null) {
                block.css('background-image', "url('" + src + "')")
                    .css('background-repeat', 'no-repeat')
                    .css('background-size', 'contain')
                ;
            }
            if (height !== null) block.css('height', height);
            if (width !== null) block.css('width', width);
            if (alt !== null) block.attribute('title', alt);
        }
!switch
    init
        {
            var block;
            block = Block('div')
                .key('state', false)
                .css({
                    width: 'auto',
                    height: '30px',
                    cursor: 'pointer',
                    margin: '5px 10px',
                    fontSize: '17px'
                })
                .add(Block('block', 'label')
                    .css({
                        width: 'auto',
                        minWidth: '70px',
                        float: 'left',
                        marginRight: '10px',
                        cursor: 'inherit',
                        fontSize: 'inherit',
                        display: 'none'
                    })
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .add(Block('text', 1)
                        .data('Label 1: ')
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .add(Block('div', 'main')
                    .css({
                        width: '65px',
                        height: '100%',
                        position: 'relative',
                        cursor: 'inherit',
                        display: 'inline-block'
                    })
                    .add(Block('div', 'bg')
                        .css({
                            width: '100%',
                            height: '100%',
                            borderRadius: '16px',
                            backgroundColor: '#e4e4e4',
                            position: 'absolute',
                            top: '0',
                            left: '0',
                            zIndex: '1',
                            transition: 'background-color 0.2s ease-in-out'
                        })
                    )
                    .add(Block('block', 'circle')
                        .css({
                            width: '30px',
                            height: '100%',
                            position: 'absolute',
                            top: '0.5px',
                            left: '1px',
                            zIndex: '2',
                            transition: 'left 0.2s ease-in-out'
                        })
                        .add(Block('div')
                            .css({
                                width: '75%',
                                height: '75%',
                                borderRadius: '100%',
                                backgroundColor: 'white',
                                margin: '0 auto'
                            })
                        )
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .on('updateUI', (e, b, d) => {
                    if (block.key('state')) {
                        block.child('main/circle').css({
                            left: '34px'
                        }).sibling('bg').css({
                            backgroundColor: '#558fed'
                        });
                    } else {
                        block.child('main/circle').css({
                            left: '1px',
                        }).sibling('bg').css({
                            backgroundColor: '#e4e4e4'
                        });
                    }
                })
                .on('modified', (e, b, d) => {
                    block.on('updateUI');
                })
                .key('enabled', true)
                .on('enable', (e, b, d) => {
                    block.key('enabled', true);
                    block.css({
                        opacity: '1',
                        cursor: 'pointer'
                    });
                    e.stopPropagation();
                })
                .on('disable', (e, b, d) => {
                    block.key('enabled', false);
                    block.css({
                        opacity: '0.6',
                        cursor: 'default'
                    });
                    e.stopPropagation();
                })
                .on('activate', (e, b, d) => {
                    if (block.key('enabled')) {
                        if (d.hasOwnProperty('state')) {
                            block.key('state', (d.state == 'on'));
                            block.on('modified');
                        } else block.child('main/circle').on('click');
                    }
                })
            ;
            return block;
        }
    load
        {
            data('val', (val) => {
                var v = (val == 'on');
                if (block.key('state') != v) {
                    block.key('state', v);
                    block.on('modified', { locked: true });
                }
            });
            data('label', (label) => {
                block.child('label/text').html('').data(label);
                block.child('label').css('display', 'inline-table');
            });
            data('minWidth', (w) => {
                block.child('label').css('min-width', w);
            });
            data('marginRight', (r) => {
                block.child('label').css('margin-right', r);
            });
        }

// define custom node editor blocks

!switch-e
    init
        {
            var block = Block('block');
            return block
                .key('recv_semaphore', false)
                .key('control_flow_debug', false)
                .css({
                    width: '100px',
                    marginTop: '3px'
                })
                .add(Block('switch', 1)
                    .on('modified', (event, switch_block, data) => {
                        if (block.key('control_flow_debug'))
                            console.log('switch modified', switch_block.key('state'));
                        if (block.key('recv_semaphore') == true)
                            block.key('recv_semaphore', false);
                        else {
                            var state = switch_block.key('state');
                            block.on('update', { value: state, boomerang: true });
                        }
                    })
                )
            ;
        }
    load
        {
            data('metadata', metadata => {
                block.key('metadata', metadata);
                block.child('switch').data({
                    val: metadata.initial ? 'on' : 'off'
                });
            });
            data('val', value => {
                if (value != block.child('switch').key('state'))
                    block.key('recv_semaphore', true);
                if (block.key('control_flow_debug')) {
                    console.log('switch updated', value);
                    console.log('switch semaphore', block.key('recv_semaphore'));
                }
                block.child('switch').data({
                    val: value ? 'on' : 'off'
                });
            });
        }

!slider-e
    init
        {
            var block = Block('div');
            return block
                .key('control_flow_debug', false)
                .css({
                    height: '100%',
                    width: '100%'
                })
                .add(Block('block', 'input')
                    .css({
                        width: 'calc(100% - 35px)',
                        maxWidth: '310px',
                        float: 'left',
                        paddingLeft: '8px',
                        boxSizing: 'border-box'
                    })
                    .query('window width != 0', function (event, block) {
                        
                    })
                    .add(Block('input', 1)
                        .css({
                            transform: 'scale(1.13)',
                            width: '82%',
                            opacity: '0.8',
                            cursor: 'pointer'
                        })
                        .data({
                            type: 'range',
                            min: '1',
                            max: '10',
                            value: '5'
                        })
                        .on('input', (e, b, d) => {
                            var cfd = block.key('control_flow_debug');
                            var metadata = block.key('metadata');
                            var val = (b.node().value);
                            if (metadata.type == "int")
                                val = parseInt(val);
                            if (val === null || isNaN(val)) val = 0;
                            if (cfd) console.log('slider modified', val);
                            block.child('display/text').html('').data(`${val}`);
                            var last_input_ts = block.key('last_input_ts');
                            if (last_input_ts == null || last_input_ts == undefined) last_input_ts = 0;
                            var now_ts = Date.now();
                            if (now_ts - last_input_ts >= app.ws.api.transitional_update_interval * 1000) {
                                block.key('last_input_ts', now_ts);
                                if (val < metadata.min) val = metadata.min;
                                if (val > metadata.max) val = metadata.max;
                                if (cfd) console.log(val, 'transitional');
                                block.on('update', { value: val, transitional: true });
                            }
                            /*
                            setTimeout(((past_ts, val) => {
                                return _ => {
                                    var new_last_input_ts = block.key('last_input_ts');
                                    if (cfd) console.log('past: ', past_ts);
                                    if (cfd) console.log('new_last_input_ts: ', new_last_input_ts);
                                    if (new_last_input_ts == past_ts) {
                                        block.on('update', { value: val, transitional: false });
                                    }
                                };
                            })(now_ts, val), (app.ws.api.transitional_update_interval * 1000) * 10);
                            */
                        })
                        .on('mouseup', (e, b, d) => {
                            var metadata = block.key('metadata');
                            var val = (b.node().value);
                            if (metadata.type == "int")
                                val = parseInt(val);
                            if (val === null || isNaN(val)) val = 0;
                            block.child('display/text').html('').data(`${val}`);
                            block.key('last_input_ts', Date.now());
                            if (val < metadata.min) val = metadata.min;
                            if (val > metadata.max) val = metadata.max;
                            block.on('update', { value: val });
                        })
                        .on('touchend', (e, b, d) => {
                            b.on('mouseup');
                        })
                    )
                )
                .add(Block('block', 'display')
                    .css({
                        width: '35px',
                        float: 'left'
                    })
                    .add(Block('text', 1)
                        .css({
                            fontSize: '20px'
                        })
                    )
                )
            ;
        }
    load
        {
            data('metadata', metadata => {
                block.key('metadata', metadata);
                block.child('input/input').data({
                    min: metadata.bounds[0],
                    max: metadata.bounds[1],
                    value: metadata.initial
                });
                block.child('display/text').html('').data(`${metadata.initial}`);
            });
            data('val', value => {
                block.child('input/input').data({
                    value: value
                });
                block.child('display/text').html('').data(`${value}`);
            });
        }

!text-display-e
    init
        {
            var block = Block('block');
            return block
                .key('forward_data', {})
                .css({
                    width: 'auto',
                    paddingLeft: '15px',
                    boxSizing: 'border-box',
                    paddingBottom: '3px'
                })
                .add(Block('text', 1)
                    .data('text')
                    .css({
                        fontSize: '28px'
                    })
                )
            ;
        }
    load
        {
            data('metadata', metadata => {
                block.key('metadata', metadata);
                block.key('options', {});
                if (metadata.hasOwnProperty('editor-options') && metadata['editor-options']) {
                    block.key('options', metadata['editor-options']);
                    if (metadata['editor-options'].hasOwnProperty('capitalize') && metadata['editor-options'].capitalize)
                        block.child('text').css('text-transform', 'capitalize');
                }
                block.data({
                    val: `${metadata.initial}`
                });
            });
            data('val', value => {
                block.key('value', value);
                var metadata = block.key('metadata');
                var forward_data = block.key('forward_data');
                if (forward_data && Object.keys(forward_data).length > 0) {
                    for (var f in forward_data) {
                        block.data({
                            forward_data: {
                                id: f,
                                val: forward_data[f]
                            }
                        });
                    }
                } else {
                    block.data({
                        display: value
                    });
                }
            });
            data('display', value => {
                block.child('text').html('').data(`${value}`);
            });
            data('forward_data', forward_data => {
                //console.log(forward_data);
                var old_forward_data = block.key('forward_data');
                for (var f in forward_data) {
                    old_forward_data[forward_data.id] = forward_data.val;
                }
                block.key('forward_data', old_forward_data);
                var node_field_meta = block.key('metadata');
                var f_data_capture = node_field_meta.hasOwnProperty('editor-options') && node_field_meta['editor-options'].hasOwnProperty('forward-data-capture') && node_field_meta['editor-options']['forward-data-capture'].includes(forward_data.id);
                var f_data_index = node_field_meta['editor-options']['forward-data-capture'].indexOf(forward_data.id);
                if (f_data_capture != false && f_data_index > -1) {
                    if (node_field_meta['editor-options'].hasOwnProperty('forward-data-mapping') && node_field_meta['editor-options']['forward-data-mapping'].length > f_data_index) {
                        var mappings = node_field_meta['editor-options']['forward-data-mapping'][f_data_index];
                        for (var m in mappings) {
                            var mapping = mappings[m];
                            if (forward_data.val === mapping[0]) {
                                if (mapping[1] === null) {
                                    block.data({
                                        display: `${block.key('value')}`
                                    });
                                } else {
                                    block.data({
                                        display: `${mapping[1]}`
                                    });
                                }
                                
                            }
                        }
                    }
                }
            });
        }
