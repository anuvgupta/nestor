    *

// nestor main blockfile

// app UI content layer
app
    id app
    css
        opacity 0
        transition opacity 0.4s
        height 100%
        width 100.8%
        overflow hidden
        max-width 700px
        margin 0 auto
        box-sizing border-box
        position relative
    {
        block
            .key('deleteRed', 'rgba(237, 69, 61, 1)')
            .key('buttonBlue', 'rgba(40, 124, 246, 1)')
            .key('statusGreen', 'rgba(85, 196, 110, 1)')
            .key('slowYellow', '#f7bb0a')
            .key('stalledGrey', '#dddddd')
        ;
    }
    #auth
        {
            if (auth === true) {
                if (app.ws.api.auth) {
                    util.cookie('username', app.ws.api.auth.username, "__indefinite__");
                    util.cookie('password', app.ws.api.auth.password, "__indefinite__");
                }
                app.ws.api.get_core_list(true);
                block.child('login').on('hide', { concurrent: _ => {
                    app.ui.block.child('main').on('show');
                } });
            } else {
                if (app.ws.api.hasOwnProperty('_temp_prelogin') && app.ws.api._temp_prelogin) {
                    app.ws.api._temp_prelogin = false;
                } else block.child('login/content/error/text').css('display', 'inline-block');
            }
        }
    #node_profiles
        {
            app.main.update_node_profiles(node_profiles);
        }
    #core_list
        {
            if (Block.is.arr(core_list)) {
                if (core_list.length > 0) {
                    block.child('main/cores/default').css({
                        display: 'none'
                    }).sibling('list').css({
                        display: 'block'
                    }).data({
                        core_list: core_list
                    });
                } else {
                    block.child('main/cores/default').css({
                        display: 'table'
                    }).sibling('list').css({
                        display: 'none'
                    }).data({
                        core_list: core_list
                    });
                }
            }
        }
    #core_info
        {
            if (block.child('main/core').key('id') == core_info.id) {
                block.child('main/core').data({ core_info: core_info });
                if (block.child('main/core/default').css('display') != "none") {
                    block.child('main/core/default')
                        .css({ display: 'none' })
                    .sibling('info')
                        .css({ display: 'table' });
                }
                if (block.child('main/node').key('id') == "core") {
                    block.child('main/node').data({ node_info: {
                        name: core_info.name,
                        type: "core"
                    } });
                }
            }
            block.data({ core_name: {
                id: core_info.id,
                name: core_info.name
            } });
        }
    #core_name
        {
            if (block.child('main/core').key('id') == core_name.id) {
                block.child('main/core').data({ core_name: core_name.name });
                if (block.child('main/node').key('id') == 'core') {
                    block.child('main/node').data({ node_name: core_name.name });
                }
            }
            if (block.child('main/cores/list').child(core_name.id) != null) {
                block.child(`main/cores/list/${core_name.id}`).data({
                    name: core_name.name
                });
            }
        }
    #core_status
        {
            if (block.child('main/core').key('id') == core_status.id) {
                block.child('main/core').data({
                    core_status: core_status
                });
                if ("core" == block.child('main/node').key('id')) {
                    block.child('main/node').data({
                        node_status: core_status
                    });
                }
                block.child('main/core/bar/status').on('update');
            }
        }
    #core_nodes
        {
            if (block.child('main/core').key('id') == core_nodes.id) {
                block.child('main/core').data({
                    core_nodes: core_nodes
                });
            }
        }
    #node_info
        {
            if (block.child('main/core').key('id') == node_info.core_id) {
                block.child('main/core/nodes').data({
                    node_info: node_info
                });
            }
            if (block.child('main/node').key('id') == node_info.id) {
                block.child('main/node').data({
                    node_info: node_info
                });
            }
        }
    #node_name
        {
            if (block.child('main/core').key('id') == node_name.core_id) {
                block.child('main/core/nodes').data({
                    node_name: node_name
                });
            }
            if (block.child('main/node').key('id') == node_name.id) {
                block.child('main/node').data({
                    node_name: node_name.name
                });
            }

        }
    #node_status
        {
            if (block.child('main/core').key('id') == node_status.core_id) {
                block.child('main/core/nodes').data({
                    node_status: node_status
                });
                if (block.child('main/node').key('id') == node_status.id) {
                    block.child('main/node').data({
                        node_status: node_status
                    });
                }
                block.child('main/core/bar/status').on('update');
            }
        }
    #delete_core
        {
            if (delete_core) {
                if (delete_core == block.child('main/core').key('id')) {
                    block.child('main/core').on('hide', { next: _ => {
                        app.ui.block.child('main/cores').on('show');
                    } });
                    if ("core" == block.child('main/node').key('id')) {
                        block.child('main/node').on('hide', { next: _ => {
                            app.ui.block.child('main/cores').on('show');
                        } });
                    }
                }
            }
        }
    #delete_node
        {
            if (delete_node) {
                if (delete_node == block.child('main/node').key('id')) {
                    block.child('main/node').on('hide', { next: _ => {
                        app.ui.block.child('main/core').on('show');
                    } });
                }
            }
        }
    #node_data
        {
            if (node_data && node_data.core_id == block.child('main/core').key('id') && node_data.id == block.child('main/node').key('id')) {
                block.child('main/node').data({ node_data: node_data });
            }
        }
    #user_data
        {
            data_handlers = app.ws.api.user_data_handlers;
            if (user_data.hasOwnProperty('key') && user_data.hasOwnProperty('value')) {

                if (data_handlers.hasOwnProperty(user_data.key))
                    data_handlers[user_data.key](user_data.value);

                var node_b = block.child('main/node');
                var node_info = node_b.key('node_info');
                if (node_info) {
                    var node_profile = app.ws.api.node_profiles[node_info.type];
                    for (var i in node_profile.data) {
                        if (node_profile.data[i].hasOwnProperty('editor-options') && node_profile.data[i]['editor-options'].hasOwnProperty('user-data-capture') && node_profile.data[i]['editor-options']['user-data-capture'].includes(user_data.key)) {
                            var field_id = node_profile.data[i].id;
                            var u_d = {};
                            u_d[user_data.key] = user_data.value;
                            node_b.child(`menu/${field_id}`).data({
                                user_data: u_d
                            });
                        }
                    }
                }

            }
        }
    block login
        {
            block.css('transition', `opacity ${app.ui.transition_fade_duration}s`);
        }
        :show
            {
                block.css('display', 'table');
                block.css('opacity', '1');
                setTimeout(_ => {
                    if (data.concurrent) data.concurrent();
                }, 1);
                setTimeout(_ => {
                    if (data.next) data.next()
                }, app.ui.transition_fade_duration * 1000);
                event.stopPropagation();
            }
        :hide
            {
                block.css('opacity', '0');
                setTimeout(_ => {
                    if (data.concurrent) data.concurrent();
                }, 1);
                setTimeout(_ => {
                    block.css('display', 'none');
                    if (data && data.next) data.next();
                }, app.ui.transition_fade_duration * 1000);
                event.stopPropagation();
            }
        css
            margin 0
            opacity 1
        div logo
            css
                margin 0 auto -15px auto
                width 150px
                opacity 0.9
            image logo
                src img/nestor_b.png
                width 150px
                height 150px
        h1 h1
            html nestor
            css
                opacity 0.9
                font-size xx-large
        div content
            css
                margin-bottom 70px
            input username
                type text
                placeholder username
                css
                    width 120px
                    margin-bottom 5px
                    text-align center
                    border 1px solid rgba(20, 20, 20, 0.15)
                    border-radius 1.5px
                    outline none
                :keyup
                    {
                        if (event.keyCode == 13) {
                            block.sibling('submit').$().click();
                        }
                    }
            break br1
                // break
            input password
                type password
                placeholder password
                css
                    width 120px
                    margin-bottom 5px
                    text-align center
                    border 1px solid rgba(20, 20, 20, 0.15)
                    border-radius 1.5px
                    outline none
                :keyup
                    {
                        if (event.keyCode == 13) {
                            block.sibling('submit').$().click();
                        }
                    }
            div error
                css
                    margin-bottom 4px
                text text
                    val invalid credentials
                    css
                        color rgba(150, 30, 30, 0.8)
                        font-size 12px
                        display none
            button submit
                html enter
                css
                    width 128px
                    cursor pointer
                    border 1px solid rgba(20, 20, 20, 0.15)
                    border-radius 1.5px
                    transition background-color 0.2s ease
                    background-color #f6f6f6
                    outline none
                    height 24px
                :click
                    {
                        var username = block.sibling('username').node().value;
                        var password = block.sibling('password').node().value;
                        if (username && password) {
                            username = username.trim();
                            password = password.trim();
                            if (username != "" && password != "") {
                                util.sha256(password, hashed_password => {
                                    app.ws.api.login(username, hashed_password);
                                });
                            }
                        }
                    }
                :mouseover
                    css
                        background-color #f1f1f1
                :mouseout
                    css
                        background-color #f6f6f6
    div main
        {
            block.css('transition', `opacity ${app.ui.transition_fade_duration}s`);
        }
        :show
            {
                block.css('display', 'block');
                block.css('opacity', '1');
                setTimeout(_ => {
                    if (data.concurrent) data.concurrent();
                }, 1);
                setTimeout(_ => {
                    if (data.next) data.next()
                }, app.ui.transition_fade_duration * 1000);
                event.stopPropagation();
            }
        :hide
            {
                block.css('opacity', '0');
                setTimeout(_ => {
                    if (data.concurrent) data.concurrent();
                }, 1);
                setTimeout(_ => {
                    block.css('display', 'none');
                    if (data && data.next) data.next();
                }, app.ui.transition_fade_duration * 1000);
                event.stopPropagation();
            }
        css
            display none
            position relative
            height 100%
            width 100%
            opacity 1
            background-color #f5f5f5
            borderLeft 1px solid #f2f2f2
            borderRight 1px solid #f2f2f2
            box-sizing border-box
        @query window height != 0
            {
                if (util.mobile()) {
                    block.css('border-left', 'none');
                    block.css('border-right', 'none');
                }
            }
        div header
            css
                position absolute
                top 0
                left 0
                width 100%
                height 86px
                background-color black
                box-shadow rgba(50, 50, 50, 0.3) 0px 2px 4px
            block logo
                css
                    width 86px
                    margin-left 32px
                    margin-top -3px
                    float left
                image img
                    src img/nestor_w.png
                    height 60px
                    width 60px
            block title
                css
                    width auto
                    float left
                    margin-left -5px
                    margin-top -2px
                text text
                    val Nestor
                    css
                        color white
                        font-size 30px
                        letter-spacing 0.8px
                        cursor default
            block logout
                css
                    position absolute
                    top 0
                    right 7px
                    width 86px
                div image
                    css
                        margin 0 auto
                        cursor pointer
                        width 42px
                        height 42px
                        opacity 0.9
                        transition opacity 0.1s ease
                    :mouseover
                        css
                            opacity 1
                    :mouseout
                        css
                            opacity 0.9
                    :click
                        {
                            app.ws.api.logout();
                        }
                    image img
                        src img/power_w.png
                        width 42px
                        height 42px
        div cores
            {
                block.css('transition', `opacity ${app.ui.transition_fade_duration}s`);
            }
            :show
                {
                    block.css('display', 'block');
                    block.css('opacity', '1');
                    setTimeout(_ => {
                        if (data.concurrent) data.concurrent();
                    }, 1);
                    setTimeout(_ => {
                        if (data.next) data.next()
                    }, app.ui.transition_fade_duration * 1000);
                    event.stopPropagation();
                }
            :hide
                {
                    block.css('opacity', '0');
                    setTimeout(_ => {
                        if (data.concurrent) data.concurrent();
                    }, 1);
                    setTimeout(_ => {
                        block.css('display', 'none');
                        if (data && data.next) data.next();
                    }, app.ui.transition_fade_duration * 1000);
                    event.stopPropagation();
                }
            css
                height 100%
                width 100%
                padding-top 86px
                padding-bottom 86px
                box-sizing border-box
                opacity 1
            block default
                text text
                    val welcome
                    css
                        font-size 40px
                        color #333
                        letter-spacing 1.5px
            div list
                css
                    display none
                !core-item
                    init
                        {
                            var block = Block('div');
                            return block
                                .css({
                                    width: '100%',
                                    height: '110px',
                                    backgroundColor: 'white',
                                    borderBottom: '1px solid #ededed',
                                    cursor: 'pointer',
                                    transition: 'background-color 0.15s ease',
                                    position: 'relative'
                                })
                                .on('mouseover', _ => {
                                    block.css('background-color', '#f9f9f9');
                                })
                                .on('mouseout', _ => {
                                    block.css('background-color', 'white');
                                })
                                .add(Block('block', 'img')
                                    .css({
                                        opacity: '0.7',
                                        width: '90px',
                                        height: '110px',
                                        float: 'left',
                                        boxSizing: 'border-box',
                                        paddingTop: '3.5px'
                                    })
                                    .add(Block('image', 1)
                                        .data({
                                            src: 'img/memory_b.png',
                                            //src: 'img/gear_b.png',
                                            css: { margin: '0 auto' },
                                            width: '40px',
                                            height: '40px'
                                            //width: '35px',
                                            //height: '35px'
                                        })
                                    )
                                )
                                .add(Block('block', 'name')
                                    .css({
                                        height: '110px',
                                        float: 'left',
                                        width: 'auto'
                                    })
                                    .add(Block('text', 1)
                                        .data('Name')
                                        .css({
                                            fontSize: '25px',
                                            letterSpacing: '1px'
                                        })
                                    )
                                )
                                .add(Block('block', 'next')
                                    .css({
                                        width: '50px',
                                        height: '110px',
                                        opacity: '0.65',
                                        position: 'absolute',
                                        right: '15px',
                                    })
                                    .add(Block('image', 1)
                                        .data({
                                            src: 'img/right_b.png',
                                            css: { margin: '0 auto' },
                                            width: '50px',
                                            height: '50px'
                                        })
                                    )
                                )
                                .on('click' , _ => {
                                    var id = block.key('id');
                                    if (id) {
                                        block.parent(1)
                                            .sibling('core').data({
                                                    id: id
                                                })
                                            .sibling('cores')
                                                .on('hide', { concurrent: _ => {
                                                    block.parent(1)
                                                        .sibling('core').on('show');
                                                } });
                                    }
                                })
                            ;
                        }
                    load
                        {
                            data('name', name => {
                                block.key('name', name);
                                block.child('name/text').html('').data(name);
                            });
                            data('id', id => {
                                block.key('id', id);
                            });
                            data('status', status => {
                                switch (status.status) {
                                    case "online":
                                        block.child('status/circle').css('background-color', app.ui.block.key('statusGreen'));
                                        break;
                                    case "offline":
                                        block.child('status/circle').css('background-color', app.ui.block.key('deleteRed'));
                                        break;
                                    case "desync":
                                        block.child('status/circle').css('background-color', app.ui.block.key('slowYellow'));
                                        break;
                                    case "intermediate":
                                        block.child('status/circle').css('background-color', app.ui.block.key('buttonBlue'));
                                        break;
                                    case "new":
                                    default:
                                        block.child('status/circle').css('background-color', app.ui.block.key('stalledGrey'));
                                        break;
                                }
                            });
                        }
                #core_list
                    {
                        block.html('');
                        for (var c in core_list) {
                            block.add(Block('core-item', core_list[c].id).data(core_list[c]));
                        }
                    }
            block footer
                css
                    position absolute
                    bottom 0
                    left 0
                    width 100%
                    height 105px
                    padding-bottom 15px
                    background-color black
                    cursor pointer
                :mouseover
                    img
                        css
                            opacity 1
                :mouseout
                    img
                        css
                            opacity 0.9
                :click
                    {
                        app.ws.api.new_core();
                    }
                div img
                    css
                        opacity 0.9
                        margin 0 auto
                        cursor pointer
                        height 60px
                        width 60px
                        transition opacity 0.1s ease
                    image image
                        src img/plus_w.png
                        width 60px
                        height 60px
        div core
            {
                block.css('transition', `opacity ${app.ui.transition_fade_duration}s`);
            }
            :show
                {
                    block.css('display', 'block');
                    block.css('opacity', '1');
                    setTimeout(_ => {
                        if (data.concurrent) data.concurrent();
                    }, 1);
                    setTimeout(_ => {
                        if (data.next) data.next()
                    }, app.ui.transition_fade_duration * 1000);
                    event.stopPropagation();
                }
            :hide
                {
                    //alert('Close Menu');
                    block.css('opacity', '0');
                    setTimeout(_ => {
                        if (data && data.concurrent) data.concurrent();
                    }, 1);
                    setTimeout(_ => {
                        block.css('display', 'none');
                        if (data && data.next) data.next();
                    }, app.ui.transition_fade_duration * 1000);
                    event.stopPropagation();
                }
            css
                display none
                height 100%
                width 100%
                padding-top 86px
                box-sizing border-box
                opacity 1
            #id
                {
                    block.key('id', id);
                    block.key('core_info', null);
                    app.ws.api.get_core_info(id);
                }
            #core_info
                {
                    block.key('core_info', core_info);
                    block.child('info/content/text1').html('').data(core_info.code);
                    block.child('info/content/text2').html('').data(core_info.id);
                    block.data({ core_name: core_info.name });
                }
            #core_name
                {
                    var core_info = block.key('core_info');
                    core_info.name = core_name;
                    block.key('core_info', core_info);
                    // block.child('bar/title/display/text').html('').data(core_info.name);
                    block.child('nodes/core-node').data({
                        title: core_info.name
                    });
                }
            #core_status
                {
                    if (core_status.status == "new") {
                        block.child('info')
                            .css('display', 'table')
                        .sibling('nodes')
                            .css('display', 'none')
                        .sibling('default')
                            .css('display', 'none');
                        block.child('nodes/core-node').data({
                            status: {
                                code: "new",
                                time: -1
                            }
                        });
                    } else {
                        block.child('info')
                            .css('display', 'none')
                        .sibling('nodes')
                            .css('display', 'block')
                        .sibling('default')
                            .css('display', 'none');
                        block.child('nodes/core-node').data({
                            status: {
                                code: core_status.status,
                                time: core_status.status_time
                            }
                        });
                    }
                }
            #core_nodes
                {
                    block.child('nodes').data({ nodes: core_nodes });
                }
            div bar
                css
                    width 100%
                    height 80px
                    background-color white
                    border-bottom 1px solid #e8e8e8
                    position absolute
                    z-index 5
                block title
                    css
                        position absolute
                        top 0
                        left 0
                    div display
                        text text
                            html Dashboard
                            css
                                font-size 32px
                                cursor default
                block back
                    css
                        width 50px
                        position absolute
                        top 0
                        left 0
                    button div
                        css
                            height 45px
                            width 125px
                            margin-left 16px
                            background-color rgba(20, 20, 20, 0)
                            border-radius 5px
                            cursor pointer
                            transition background-color 0.2s ease
                            position relative
                            z-index 200
                            border none
                            outline none
                        @query window height != 0
                            {
                                if (util.mobile()) {
                                    block.css('width', '138px');
                                }
                            }
                        :mouseover
                            css
                                background-color rgba(20, 20, 20, 0.05)
                        :mouseout
                            css
                                background-color rgba(20, 20, 20, 0)
                        :click
                            {
                                var bb = block;
                                bb.parent(2).on('hide', { next: _ => {
                                    bb.parent(2).sibling('cores').on('show');
                                } });
                                event.stopPropagation();
                            }
                        image img
                            src img/right_b.png
                            css
                                transform rotate(180deg)
                                display block
                                float left
                                margin-right 4px
                                opacity 0.7
                            width 40px
                            height 40px
                        text text
                            val Cores
                            css
                                font-size 24px
                                display block
                                float left
                                margin-top 4.7px
                                opacity 0.8
                                cursor pointer
                            @query window height != 0
                                {
                                    if (util.mobile())
                                        block.css('margin-top', '3.25px');
                                }
                block status
                    css
                        width 64px
                        position absolute
                        top 0
                        right 10px
                    div light
                        css
                            height 20px
                            width 20px
                            background-color #ddd
                            border 1px solid #eee
                            border-radius 100%
                            margin 0 auto
                    :update
                        {
                            var agg_status = {
                                code: "new",
                                time: -1
                            };
                            var node_items = block.parent().sibling('nodes').children();
                            var core_status = node_items['core-node'].key('status');
                            if (core_status) {
                                agg_status.code = core_status.code;
                                agg_status.time = core_status.time;
                                if (core_status.code == "online") {
                                    for (var n_i in node_items) {
                                        if (node_items.hasOwnProperty(n_i) && node_items[n_i] && node_items[n_i].type() == 'node-item' && n_i != 'core-node') {
                                            var status = node_items[n_i].key('status');
                                            if (status && (status.code == "offline" || status.code == "desync")) {
                                                agg_status.code = "intermediate";
                                            }
                                        }
                                    }
                                }
                            }
                            switch (agg_status.code) {
                                case "online":
                                    block.child('light').css('background-color', app.ui.block.key('statusGreen'));
                                    break;
                                case "offline":
                                    block.child('light').css('background-color', app.ui.block.key('deleteRed'));
                                    break;
                                case "desync":
                                    block.child('light').css('background-color', app.ui.block.key('slowYellow'));
                                    break;
                                case "intermediate":
                                    block.child('light').css('background-color', app.ui.block.key('buttonBlue'));
                                    break;
                                case "new":
                                default:
                                    block.child('light').css('background-color', app.ui.block.key('stalledGrey'));
                                    break;
                            }
                        }
            block default
                css
                    box-sizing border-box
                    margin-top 10px
                image img
                    src img/loading_b.svg
                    css
                        margin 0 auto
                        opacity 0.54
                    height 80px
                    width 80px
            block info
                css
                    display none
                    box-sizing border-box
                    padding-top 80px
                    padding-bottom 100px
                    position relative
                div content
                    css
                        width 210px
                        height 230px
                        margin 0 auto
                    image img
                        src img/memory_b.png
                        css
                            opacity 0.7
                            margin 0 auto
                        height 130px
                        width 130px
                    text text1
                        html &nbsp;
                        css
                            color black
                            font-size 40px
                            text-align center
                            letter-spacing 1.5px
                    break br
                        // break
                    text text2
                        html &nbsp;
                        css
                            color black
                            font-size 17px
                            text-align center
                div delete
                    css
                        position absolute
                        bottom 0
                        left 0
                        height 140px
                        width 100%
                    block wrap
                        css
                            width 30%
                            height 100%
                            padding-top 52px
                            box-sizing border-box
                            margin 0 auto
                        block button
                            :click
                                {
                                    var core_info = block.parent(3).key('core_info');
                                    if (core_info && core_info.name && core_info.id) {
                                        app.ws.api.delete_core(core_info.id, core_info.name);
                                    }
                                }
                            css
                                background-color rgb(215, 215, 215)
                                color white
                                cursor pointer
                                transition background-color 0.15s ease, color 0.15s ease
                                border-radius 5px 5px 0 0
                                border 1px solid #ddd
                            :mouseout
                                css
                                    background-color rgb(215, 215, 215)
                                    color white
                            :mouseover
                                css
                                    background-color rgba(180, 49, 41, 0.87)
                                    color white
                            image img
                                src img/trash_w.png
                                height 45px
                                width 45px
                                css
                                    margin 0 auto
                            div text
                                css
                                    display none
                                text text
                                    val delete
                                    css
                                        text-transform uppercase
                                        font-size 25px
            div nodes
                css
                    display none
                    box-sizing border-box
                    height 100%
                    width 100%
                    padding 105px 22px 35px
                    overflow scroll
                #nodes
                    {
                        var children = block.children();
                        for (var c in children) {
                            if (c != "core-node" && children.hasOwnProperty(c) && children[c]) {
                                children[c].remove();
                            }
                        }
                        for (var m in nodes.nodes) {
                            var node_id = nodes.nodes[m];
                            block.add(Block('node-item', node_id)
                                .key('id', node_id)
                                .key('mac', m)
                                .data({
                                    title: "Node " + (m.slice(0, 4)),
                                    type: "node"
                                })
                            );
                            app.ws.api.get_node_info(node_id);
                        }
                        Block.queries();
                    }
                #node_info
                    {
                        var node_item = block.child(node_info.id);
                        if (node_item) {
                            node_item.data({
                                id: node_info.id,
                                title: node_info.name,
                                type: node_info.type
                            });
                        }
                    }
                #node_name
                    {
                        var node_item = block.child(node_name.id);
                        if (node_item) {
                            node_item.data({
                                title: node_name.name,
                            });
                        }
                    }
                #node_status
                    {
                        var node_item = block.child(node_status.id);
                        if (node_item) {
                            node_item.data({
                                status: {
                                    code: node_status.status,
                                    time: node_status.status_time
                                }
                            });
                        }
                    }
                !node-item
                    init
                        {
                            var block = Block('block')
                                .css({
                                    width: '50%',
                                    height: '50%',
                                    minHeight: '345px',
                                    maxHeight: '355px',
                                    float: 'left'
                                })
                                .add(Block('div', 'content')
                                    .css({
                                        width: '89.5%',
                                        height: '92%',
                                        margin: '0 auto',
                                        backgroundColor: '#ffffff',
                                        border: '1px solid #f0f0f0',
                                        boxSizing: 'border-box',
                                        borderRadius: '7px',
                                        boxShadow: 'rgba(50, 50, 50, 0.04) 0px 2px 4px',
                                        transition: 'box-shadow 0.2s ease, background-color 0.2s ease',
                                        cursor: 'pointer',
                                        position: 'relative'
                                    })
                                    .on('mouseover', (e, b, d) => {
                                        b.css({
                                            boxShadow: 'rgba(50, 50, 50, 0.09) 0px 2.5px 5px',
                                            backgroundColor: '#fbfbfb'
                                        });
                                    })
                                    .on('mouseout', (e, b, d) => {
                                        b.css({
                                            boxShadow: 'rgba(50, 50, 50, 0.04) 0px 2px 4px',
                                            backgroundColor: '#ffffff'
                                        });
                                    })
                                    .add(Block('div', 'img')
                                        .css({
                                            margin: '20px auto 0',
                                            height: '160px',
                                            width: '160px',
                                            opacity: '0.7'
                                        })
                                        .bind('load', load => {
                                            block.child('content/img/image').data({
                                                src: load,
                                                height: '160px',
                                                width: '160px'
                                            });
                                        })
                                        .add(Block('image', 1))
                                    )
                                    .add(Block('div', 'title')
                                        .add(Block('text', 1)
                                            .data('Title')
                                            .css({
                                                fontSize: '35px',
                                                color: '#222'
                                            })
                                        )
                                    )
                                    .add(Block('div', 'status')
                                        .css({
                                            width: '100%',
                                            height: '80px',
                                            marginTop: '8px',
                                            position: 'absolute',
                                            bottom: '13.2px'
                                        })
                                        .add(Block('block', 'light')
                                            .css({
                                                width: '27%',
                                                height: '100%',
                                                float: 'left'
                                            })
                                            .query('window width >= 665', function (event, block, data) {
                                                block.css('width', '27%');
                                            })
                                            .query('window width < 665', function (event, block, data) {
                                                block.css('width', '23%');
                                            })
                                            .add(Block('div', 'circle')
                                                .css({
                                                    borderRadius: '100%',
                                                    height: '20px',
                                                    width: '20px',
                                                    backgroundColor: '#ddd',
                                                    border: '1px solid #eee',
                                                    margin: '0 0 0 auto'
                                                })
                                            )
                                        )
                                        .add(Block('div', 'labels')
                                            .css({
                                                width: '73%',
                                                height: '100%',
                                                float: 'left',
                                                paddingLeft: '25px',
                                                boxSizing: 'border-box'
                                            })
                                            .add(Block('div', 'type')
                                                .css({
                                                    height: '50%',
                                                    width: '100%'
                                                })
                                                .add(Block('text', 1)
                                                    .data('Type')
                                                    .css({
                                                        display: 'block',
                                                        textAlign: 'left',
                                                        paddingTop: '13px',
                                                        fontSize: '23px',
                                                        color: '#222'
                                                    })
                                                )
                                            )
                                            .add(Block('div', 'status')
                                                .css({
                                                    height: '50%',
                                                    width: '100%'
                                                })
                                                .add(Block('text', 1)
                                                    .data('Status 5 min ago')
                                                    .css({
                                                        display: 'block',
                                                        textAlign: 'left',
                                                        fontSize: '15px',
                                                        color: '#888',
                                                        fontStyle: 'italic',
                                                        paddingTop: '3px'
                                                    })
                                                )
                                            )
                                        )
                                    )
                                )
                                .on('click', _ => {
                                    var id = block.key('id');
                                    if (id) {
                                        block.parent(1)
                                            .sibling('node').data({
                                                id: id
                                            });
                                        block.parent(1).on('hide', { concurrent: _ => {
                                            block.parent(1).sibling('node').on('show');
                                        }});
                                    }
                                })
                            ;
                            return block;
                        }
                    load
                        {
                            data('title', title => {
                                block.child('content/title/text').html('').data(title);
                            });
                            data('type', type => {
                                block.child('content/img').data({ load: 'img/' + app.ws.api.node_profiles[type].node.img + '.png' });
                                block.child('content/status/labels/type/text').html('').data(app.ws.api.node_profiles[type].node.label);
                            });
                            data('status', status => {
                                block.key('status', status);
                                block.child('content/status/labels/status/text').html('').data(status.code.charAt(0).toUpperCase() + status.code.slice(1) + " " + (status.code == "online" ? "now" : util.duration_desc(status.time)));
                                switch (status.code) {
                                    case "online":
                                        block.child('content/status/light/circle').css('background-color', app.ui.block.key('statusGreen'));
                                        break;
                                    case "offline":
                                        block.child('content/status/light/circle').css('background-color', app.ui.block.key('deleteRed'));
                                        break;
                                    case "desync":
                                        block.child('content/status/light/circle').css('background-color', app.ui.block.key('slowYellow'));
                                        break;
                                    case "new":
                                    default:
                                        block.child('content/status/light/circle').css('background-color', app.ui.block.key('stalledGrey'));
                                        break;
                                }
                            });
                            data('id', id => {
                                block.key('id', id);
                            });
                        }
                {
                    var updateNodeStatus = _ => {
                        var node_items = block.children();
                        for (var n_i in node_items) {
                            var node_item = node_items[n_i];
                            var node_status = node_item.key('status');
                            if (node_status != null) {
                                node_item.data({
                                    status: node_status
                                });
                            }
                        }
                        setTimeout(updateNodeStatus, app.update_node_status_interval * 1000);
                    };
                    setTimeout(updateNodeStatus, 5000);
                }
                node-item core-node
                    title Core Node
                    type core
                    id core
        div node
            {
                block.key('node_data', null);
                block.css('transition', `opacity ${app.ui.transition_fade_duration}s`);
            }
            :show
                {
                    block.css('display', 'block');
                    block.css('opacity', '1');
                    setTimeout(_ => {
                        if (data.concurrent) data.concurrent();
                    }, 1);
                    setTimeout(_ => {
                        if (data.next) data.next()
                    }, app.ui.transition_fade_duration * 1000);
                    event.stopPropagation();
                }
            :hide
                {
                    //alert('Close Menu');
                    block.css('opacity', '0');
                    setTimeout(_ => {
                        if (data && data.concurrent) data.concurrent();
                    }, 1);
                    setTimeout(_ => {
                        block.css('display', 'none');
                        if (data && data.next) data.next();
                    }, app.ui.transition_fade_duration * 1000);
                    event.stopPropagation();
                }
            css
                display none
                height 100%
                width 100%
                padding-top 86px
                box-sizing border-box
                opacity 1
            #id
                {
                    block.key('id', id);
                    block.key('node_info', null);
                    block.child('menu').css('display', 'none')
                        .sibling('default').css('display', 'table');
                    if (id == "core") {
                        var id = block.sibling('core').key('id');
                        if (id) app.ws.api.get_core_info(id, false);
                    } else {
                        app.ws.api.get_node_info(id);
                        setTimeout(_ => {
                            app.ws.api.get_node_data(id);
                        }, 150);
                    }
                }
            #menu_type
                {
                    if (app.ws.api.node_profiles.hasOwnProperty(menu_type) && app.ws.api.node_profiles[menu_type]) {
                        var menu_profile = app.ws.api.node_profiles[menu_type];
                        block.child('menu/status/labels/type/text').html('').data(menu_profile.node.label);
                        block.child('menu/status/image/img').data({ src: `img/${menu_profile.node.img}.png` });
                        var old_children = block.child('menu').children();
                        for (var c in old_children) {
                            if (c != "status" && c != "submenu")
                                block.child('menu').remove(c);
                        }
                        for (var i in menu_profile.data) {
                            var data_field = menu_profile.data[i];
                            if (data_field.hasOwnProperty('editor') && data_field.editor) {
                                if (data_field.editor != 'null') {
                                    block.child('menu').add(Block('node-menu-item', data_field.id)
                                        .data({ metadata: data_field })
                                    );
                                }
                            }
                            if (data_field.hasOwnProperty('header') && data_field.header) {
                                block.child('menu').add(Block('node-menu-header', `${data_field.id}-header`)
                                    .data({ val: data_field.header })
                                , data_field.id);
                            }
                        }
                        block.child('default').css('display', 'none')
                            .sibling('menu').css('display', 'block');
                    }
                    if (menu_type == "core") {
                        var core_info = app.ui.block.child('main/core').key('core_info');
                        if (core_info) app.ui.load_core_menu(block, core_info);
                    }
                    setTimeout(_ => {
                        var node_data = block.key('node_data');
                        if (node_data && node_data != null && node_data.id == block.key('id')) {
                            block.data({
                                node_data: node_data
                            });
                        }
                    }, 5);
                    setTimeout(_ => {
                        Block.queries();
                    }, 10);
                }
            #node_info
                {
                    block.key('node_info', node_info);
                    block.data({
                        node_name: node_info.name,
                        menu_type: node_info.type
                    });
                }
            #node_name
                {
                    var node_info = block.key('node_info');
                    node_info.name = node_name;
                    block.key('node_info', node_info);
                    block.child('bar/title/editor').css('display', 'none').data(node_name)
                        .child('input').$().blur();
                    block.child('bar/title/display/text').html('').data(node_name)
                        .parent().css('display', 'block');
                }
            #node_status
                {
                    block.child('menu/status').data({
                        status: {
                            code: node_status.status,
                            time: node_status.status_time
                        }
                    });
                }
            #node_data
                {
                    //block.key('node_data', node_data);
                    //console.log(node_data);
                    if (node_data && node_data.data && node_data.id && node_data.core_id) {
                        var old_data = block.key('node_data');
                        if (old_data === null) {
                            block.key('node_data', {});
                            old_data = block.key('node_data');
                        }
                        old_data.id = node_data.id;
                        old_data.core_id = node_data.core_id;
                        block.key('node_data', old_data);
                        block.data({
                            local_update_node_data: node_data.data
                        });
                    }
                    var node_info = block.key('node_info');
                    if (node_info != null)  {
                        for (var d in node_data.data) {
                            var field_meta = app.ws.api.get_node_field_meta(node_info.type, d);
                            var child_block = block.child(`menu/${d}`);
                            if (child_block != null) {
                                child_block.data({
                                    val: node_data.data[d]
                                });
                            }
                            if (field_meta) {
                                if (field_meta.hasOwnProperty('forwarding') && field_meta.forwarding != null) {
                                    for (var f in field_meta.forwarding) {
                                        // console.log(field_meta.forwarding[f]);
                                        var forwarding_id = field_meta.forwarding[f];
                                        var forwarding_block = block.child(`menu/${forwarding_id}`);
                                        if (forwarding_block != null) {
                                            forwarding_block.data({
                                                forward_data: {
                                                    id: d,
                                                    val: node_data.data[d]
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            #local_update_node_data
                {
                    var data_updates = local_update_node_data;
                    var node_data = block.key('node_data');
                    if (data_updates && node_data) {
                        // console.log(node_data, data_updates);
                        if (!node_data.hasOwnProperty('data') || !(node_data.data))
                            node_data.data = {};
                        for (var d in data_updates) {
                            node_data.data[d] = data_updates[d];
                        }
                        block.key('node_data', node_data);
                    }
                }
            div bar
                css
                    width 100%
                    height 80px
                    background-color white
                    border-bottom 1px solid #e8e8e8
                    position absolute
                    z-index 5
                block title
                    css
                        position absolute
                        top 0
                        left 0
                    div display
                        text text
                            html &nbsp;
                            css
                                font-size 32px
                                cursor default
                    div editor
                        css
                            display none
                        input input
                            placeholder Core Title
                            css
                                font-size 32px
                                text-align center
                                outline none
                                border none
                                background-color rgba(0,0,0,0)
                            :keyup
                                {
                                    if (event.keyCode) {
                                        if (event.keyCode == 13) {
                                            block.$().blur();
                                        } else if (event.keyCode == 27) {
                                            var node_info = block.parent(3).key('node_info');
                                            if (node_info && node_info.name && node_info.name != "") {
                                                block.node().value = node_info.name;
                                                block.$().blur();
                                            }
                                        }
                                    }
                                }
                            :focusout
                                {
                                    block.on('save');
                                }
                            :save
                                {
                                    var value = (`${block.node().value}`).trim();
                                    var node_id = block.parent(3).key('id');
                                    var node_info = block.parent(3).key('node_info');
                                    if (value && value != "" && node_id && node_id != "") {
                                        if (value != node_info.name) {
                                            if (node_id == 'core') {
                                                var core_info = block.parent(3).sibling('core').key('core_info');
                                                if (core_info && core_info.id && core_info.id != "")
                                                    app.ws.api.set_core_name(core_info.id, value);
                                            } else app.ws.api.set_node_name(node_id, value);
                                        } else {
                                            block.parent(3).data({ node_name: node_info.name });
                                        }
                                    }
                                }
                        #val
                            {
                                block.child('input').node().value = val;
                            }
                block back
                    css
                        width 50px
                        position absolute
                        top 0
                        left 0
                    button div
                        css
                            height 45px
                            width 132px
                            margin-left 16px
                            background-color rgba(20, 20, 20, 0)
                            border-radius 5px
                            cursor pointer
                            transition background-color 0.2s ease
                            position relative
                            z-index 200
                            border none
                            outline none
                        @query window height != 0
                            {
                                if (util.mobile()) {
                                    block.css('width', '143px');
                                }
                            }
                        :mouseover
                            css
                                background-color rgba(20, 20, 20, 0.05)
                        :mouseout
                            css
                                background-color rgba(20, 20, 20, 0)
                        :click
                            {
                                var bb = block;
                                bb.parent(2).on('hide', { next: _ => {
                                    bb.parent(2).sibling('core').on('show');
                                } });
                                var submenu = bb.parent(2).child('menu/submenu');
                                //var menu_ret = submenu.key('menu_return');
                                //if (menu_ret && menu_ret != 'null')
                                    submenu.key('menu_return', 'null');
                                setTimeout(_ => {
                                    submenu.child('bar/exit').on('click');
                                }, 100);
                                event.stopPropagation();
                            }
                        image img
                            src img/right_b.png
                            css
                                transform rotate(180deg)
                                display block
                                float left
                                margin-right 4px
                                opacity 0.8
                            width 40px
                            height 40px
                        text text
                            val Nodes
                            css
                                font-size 24px
                                display block
                                float left
                                margin-top 4.7px
                                opacity 0.8
                                cursor pointer
                            @query window height != 0
                                {
                                    if (util.mobile())
                                        block.css('margin-top', '3.25px');
                                }
                block edit
                    css
                        width 64px
                        position absolute
                        top 0
                        right 10px
                    image img
                        height 40px
                        width 40px
                        src img/pencil_b.png
                        css
                            margin 0 auto
                            opacity 0.61
                            cursor pointer
                            transition opacity 0.15s ease
                        :mouseover
                            css
                                opacity 0.7
                        :mouseout
                            css
                                opacity 0.61
                        :click
                            {
                                block.parent().sibling('title').child('display').css('display', 'none')
                                    .sibling('editor').css('display', 'block')
                                        .child('input').$().focus().select();
                            }
            block default
                css
                    box-sizing border-box
                    margin-top 10px
                image img
                    src img/loading_b.svg
                    css
                        margin 0 auto
                        opacity 0.54
                    height 80px
                    width 80px
            !node-menu-item
                init
                    {
                        var block = Block('block');
                        return block
                            .css({
                                width: '100%',
                                //height: '135px',
                                height: '110px',
                                backgroundColor: 'white',
                                borderBottom: '1px solid #eee',
                                position: 'relative'
                            })
                            .add(Block('block', 'icon')
                                .css({
                                    width: '135px',
                                    float: 'left'
                                })               
                                .add(Block('image', 1)
                                    .data({
                                        src: 'img/gear_b.png',
                                        width: '37px',
                                        height: '37px',
                                    })
                                    .css({
                                        opacity: '0.65',
                                        margin: '0 auto'
                                    })
                                )
                            )
                            .add(Block('block', 'label')
                                .css({
                                    width: 'auto',
                                    float: 'left',
                                    marginLeft: '-3px',
                                    display: 'none'
                                })
                                .add(Block('text', 1)
                                    .data('Label: ')
                                    .css({
                                        fontSize: '20px'
                                    })
                                )
                            )
                            .add(Block('div', 'editor')
                                .css({
                                    height: '100%',
                                    width: 'calc(100% - 135px)',
                                    minWidth: '50px',
                                    boxSizing: 'border-box',
                                    float: 'left'
                                })
                                .query('window width != 0', function (event, block, data) {
                                    var lbl = block.sibling('label');
                                    var new_width = `calc(100% - 135px - (${lbl.$().width()}px))`;
                                    block.css('width', new_width);
                                })
                            )
                            .on('local-update', (e, b, d) => {
                                if (d && d.value !== null) {
                                    var value = d.value;
                                    var field_id = block.key('id');
                                    if (field_id) {
                                        var local_update = {};
                                        local_update[field_id] = value;
                                        app.ui.block.child('main/node').data({
                                            local_update_node_data: local_update
                                        });
                                    }
                                }
                            })
                        ;
                    }
                load
                    {
                        data('metadata', metadata => {
                            block.key('id', metadata.id);
                            block.key('value', metadata.initial);
                            block.key('value-alt', {});
                            block.key('metadata', metadata);
                            block.child('icon/image').data({ src: `img/${metadata.img}.png` });
                            if (metadata.hasOwnProperty('label') && metadata.label)
                                block.child('label/text').html('').data(`${metadata.label}: `)
                                    .parent().css('display', 'table');
                            block.child('editor').add(Block(`${metadata.editor}-e`, 'view')
                                .data({ metadata: metadata })
                                .on('update', (event, editor_block, data) => {
                                    //if (data.hasOwnProperty('value') && data.value != block.key('value')) {
                                    if (data.hasOwnProperty('value')) {
                                        block.key('value', data.value);
                                        // console.log('update: ', data.value);
                                        block.on('local-update', {
                                            value: data.value
                                        });
                                        if (!data.hasOwnProperty('update_node_data') || data.update_node_data == true) {
                                            app.ws.api.update_node_data(app.ui.block.child('main/node').key('id'), metadata.id, data.value,
                                                data.hasOwnProperty('transitional') && data.transitional === true,
                                                data.hasOwnProperty('boomerang') && data.boomerang === true);
                                        }
                                    }
                                })
                                .on('update-alt', (event, editor_block, data) => {
                                    if (data.hasOwnProperty('value') && data.hasOwnProperty('id')) {
                                        var alt_val_keys = block.key('value-alt');
                                        if (alt_val_keys) {
                                            alt_val_keys[data.id] = data.value;
                                            block.key('value-alt', alt_val_keys);
                                            if (!data.hasOwnProperty('update_node_data') || data.update_node_data == true) {
                                                app.ws.api.update_node_data(app.ui.block.child('main/node').key('id'), data.id, data.value,
                                                    data.hasOwnProperty('transitional') && data.transitional === true, 
                                                    data.hasOwnProperty('boomerang') && data.boomerang === true);
                                            }
                                        }
                                    }
                                })
                            );
                        });
                        data('val', value => {
                            block.key('value', value);
                            block.child('editor/view').data({ val: value });
                            // console.log(block.key('id'), value);
                            block.on('local-update', {
                                value: value
                            });
                        });
                        data('forward_data', forward_data => {
                            block.key('forward_data', forward_data);
                            var node_field_meta = block.key('metadata');
                            var f_data_capture = node_field_meta.hasOwnProperty('editor-options') && node_field_meta['editor-options'].hasOwnProperty('forward-data-capture') && node_field_meta['editor-options']['forward-data-capture'].includes(forward_data.id);
                            if (f_data_capture)
                                block.child('editor/view').data({ forward_data: forward_data });
                            // console.log(block.mark(), forward_data);
                        });
                        data('user_data', user_data => {
                            block.child('editor/view').data({
                                user_data: user_data
                            });
                        });
                    }
            !node-menu-header
                init
                    {
                        var block = Block('block');
                        return block
                            .css({
                                height: '45px',
                                backgroundColor: '#f8f8f8',
                                borderBottom: '1px solid #efefef',
                                boxSizing: 'border-box',
                                paddingLeft: '47px'
                            })
                            .__child('content')
                                .css('text-align', 'left')
                                .__parent()
                            .add(Block('text', 1)
                                .data('text')
                                .css({
                                    fontSize: '21px',
                                    color: '#333'
                                })
                            )
                        ;
                    }
                load
                    {
                        data('val', val => {
                            block.child('text').html('').data(val);
                        });
                    }
            div menu
                css
                    box-sizing border-box
                    padding-top 80px
                    display none
                    width 100%
                    height 100%
                    position relative
                    z-index 1
                    overflow-y auto
                    overflow-x hidden
                    padding-bottom 70px
                div submenu
                    css
                        width 100%
                        height 100%
                        background-color white
                        position absolute
                        top 0
                        left 0
                        padding-top 80px
                        z-index 10
                        box-sizing border-box
                        display none
                        opacity 0
                        //transition opacity 0.2s ease
                    :show
                        {
                            block.key('parent_scrolltop', block.parent().$().scrollTop())
                            block.parent().$().scrollTop(0);
                            block.css('display', 'block');
                            //setTimeout(_ => {
                                block.parent().css('overflow-y', 'hidden');
                                block.css('opacity', '1');
                            //}, 10);
                            event.stopPropagation();
                        }
                    :hide
                        {
                            block.parent().css('overflow-y', 'auto');
                            var parent_scrolltop = block.key('parent_scrolltop');
                            if (parent_scrolltop !== null) {
                                block.parent().$().scrollTop(parent_scrolltop);
                            }
                            //setTimeout(_ => {
                                block.css('opacity', '0');
                                //setTimeout(_ => {
                                    block.css('display', 'none');
                                //}, 200);
                            //}, 10);
                            event.stopPropagation();
                        }
                    :hide_children
                        {
                            var children = block.child('content-wrap/content').children();
                            for (var c in children) {
                                children[c].css('display', 'none');
                            }
                        }
                    div bar
                        css
                            position absolute
                            top 80px
                            left 0
                            width 100%
                            height 65px
                            z-index 12
                            border-bottom 1px solid #f0f0f0
                        block exit
                            css
                                position absolute
                                top 0
                                left 25px
                                width 50px
                                cursor pointer
                                opacity 0.65
                                padding-top 3px
                                box-sizing border-box
                                transition opacity 0.15s ease
                                z-index 14
                            :mouseover
                                css
                                    opacity 0.8
                            :mouseout
                                css
                                    opacity 0.65
                            :click
                                {
                                    var submenu = app.ui.block.child('main/node/menu/submenu');

                                    app.ui.submenu_pre_exit(event, block, data);

                                    var menu_return = submenu.key('menu_return');
                                    if (menu_return && menu_return != 'null' && menu_return.from && menu_return.to && submenu.child(`content-wrap/content/${menu_return.from}`).css('display') != 'none') {
                                        var to_path = `content-wrap/content/${menu_return.to}`;
                                        submenu.child('bar/title/text').html('').data(`${submenu.child(to_path).key('submenu_title')}`);
                                        submenu.on('hide_children');
                                        submenu.child(to_path).css('display', 'block');
                                        submenu.key('menu_return', 'null');
                                    } else {

                                        app.ui.submenu_exit(event, block, data);

                                        // hide submenu
                                        block.parent(1).on('hide');
                                    }
                                    event.stopPropagation();
                                }
                            image img
                                height 44px
                                width 44px
                                src img/x_b.png
                        block title
                            css
                                position absolute
                                top 0
                                left 0
                                z-index 13
                            text text
                                val Submenu Title
                                css
                                    font-size 23px
                    div content-wrap
                        css
                            position absolute
                            top 0
                            left 0
                            height 100%
                            width 100%
                            z-index 11
                            box-sizing border-box
                            padding-top 145px
                        div content
                            css
                                position relative
                                height 100%
                                width 100%
                div status
                    css
                        width 100%
                        height 145px
                        background-color white
                        border-bottom 1px solid #ececec
                        position relative
                    #status
                        {
                            block.key('status', status);
                            block.child('labels/status/text').html('').data(status.code.charAt(0).toUpperCase() + status.code.slice(1) + " " + (status.code == "online" ? "now" : util.duration_desc(status.time)));
                            switch (status.code) {
                                case "online":
                                    block.child('light/circle').css('background-color', app.ui.block.key('statusGreen'));
                                    break;
                                case "offline":
                                    block.child('light/circle').css('background-color', app.ui.block.key('deleteRed'));
                                    break;
                                case "desync":
                                    block.child('light/circle').css('background-color', app.ui.block.key('slowYellow'));
                                    break;
                                case "new":
                                default:
                                    block.child('light/circle').css('background-color', app.ui.block.key('stalledGrey'));
                                    break;
                            }
                        }
                    block image
                        css
                            width  135px
                            float left
                        image img
                            width 50px
                            height 50px
                            src img/gear_b.png
                            css
                                opacity 0.65
                                margin 0 auto
                    block light
                        css
                            float left
                            width 50px
                            margin-right 15px
                            margin-left -12px
                        div circle
                            css
                                border-radius 100%
                                height 20px
                                width 20px
                                margin 0 auto
                                border 1px solid #eee
                                background-color #ddd
                    div labels
                        css
                            width 55%
                            height 100%
                            float left
                            padding-left 2px
                            box-sizing border-box
                        div type
                            css
                                height 50%
                                width 100%
                                position relative
                            text text
                                val Type
                                css
                                    display block
                                    text-align left
                                    font-size 27px
                                    color #222
                                    position absolute
                                    bottom -1.5px
                                    left 0
                        div status
                            css
                                height 50%
                                width 100%
                            text text
                                val Status 5 min ago
                                css
                                    display block
                                    text-align left
                                    font-size 16px
                                    color #888
                                    font-style italic
                                    padding-top 5px
                    block delete
                        css
                            width 72px
                            position absolute
                            top 0
                            right 45px
                        block button
                            css
                                // background-color #dcdcdc
                                background-color #d4d4d4
                                width 100%
                                height 44%
                                color white
                                border-radius 3px
                                cursor pointer
                                transition background-color 0.1s ease
                            //text text
                            //    val Delete
                            //    css
                            //        text-transform uppercase
                            //        font-size 17px
                            image img
                                src img/trash_w.png
                                height 37px
                                width 37px
                                css
                                    margin 0 auto
                            :mouseout
                                css
                                    background-color #dcdcdc
                            :mouseover
                                css
                                    background-color rgba(190, 49, 41, 0.9)
                            :click
                                {
                                    var id = block.parent(3).key('id');
                                    if (id == 'core') {
                                        var core_info = block.parent(3).sibling('core').key('core_info');
                                        if (core_info && core_info.name && core_info.id) {
                                            app.ws.api.delete_core(core_info.id, core_info.name);
                                        }
                                    } else {
                                        var node_info = block.parent(3).key('node_info');
                                        if (node_info && node_info.name) {
                                            app.ws.api.delete_node(id, node_info.name);
                                        }
                                    }
                                }
                    block reset
                        css
                            width 55px
                            position absolute
                            top 0
                            right 135px
                        image img
                            src img/restart_i_b.png
                            width 37px
                            height 37px
                            css
                                opacity 0.25
                                cursor pointer
                                transition opacity 0.15s ease
                            :mouseover
                                css
                                    opacity 0.4
                            :mouseout
                                css
                                    opacity 0.25
                            :click
                                {
                                    var node_info = app.ui.block.child('main/node').key('node_info');
                                    if (node_info && node_info.type) {
                                        if (node_info.type == 'core') {
                                            var core_info = app.ui.block.child('main/core').key('core_info');
                                            if (core_info && core_info.id) {
                                                app.ws.api.reset_core(core_info.id);
                                            }
                                        } else if (node_info.id) {
                                            app.ws.api.reset_node(node_info.id);
                                        }
                                        var $b = block.$();
                                        $b.addClass('rotate');
                                        setTimeout(_ => {
                                            $b.removeClass('rotate');
                                        }, 500);
                                    }
                                }
                node-menu-item temp-item
                    id temp-id